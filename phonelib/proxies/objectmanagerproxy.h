/*
 *  This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */
#ifndef __dbusxx__objectmanagerproxy_h__PROXY_MARSHALL_H
#define __dbusxx__objectmanagerproxy_h__PROXY_MARSHALL_H
#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace DBus {

class ObjectManager_proxy
  : public ::DBus::InterfaceProxy
{
public:
    ObjectManager_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.DBus.ObjectManager")
    {
        connect_signal(ObjectManager_proxy, InterfacesAdded, _InterfacesAdded_stub);
        connect_signal(ObjectManager_proxy, InterfacesRemoved, _InterfacesRemoved_stub);
    }

    /* properties exported by this interface */
    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    std::map< ::DBus::Path, std::map< std::string, std::map< std::string, ::DBus::Variant > > > GetManagedObjects()
    {
        ::DBus::CallMessage __call;
        __call.member("GetManagedObjects");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        std::map< ::DBus::Path, std::map< std::string, std::map< std::string, ::DBus::Variant > > > __argout;
        __ri >> __argout;
        return __argout;
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */
    virtual void InterfacesAdded(const ::DBus::Path &object, const std::map< std::string, std::map< std::string, ::DBus::Variant > > &interfaces) = 0;
    virtual void InterfacesRemoved(const ::DBus::Path &object, const std::vector< std::string > &interfaces) = 0;

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
    void _InterfacesAdded_stub(const ::DBus::SignalMessage &__sig)
    {
        ::DBus::MessageIter __ri = __sig.reader();
        ::DBus::Path object; __ri >> object;
        std::map< std::string, std::map< std::string, ::DBus::Variant > > interfaces; __ri >> interfaces;
        InterfacesAdded(object, interfaces);
    }

    void _InterfacesRemoved_stub(const ::DBus::SignalMessage &__sig)
    {
        ::DBus::MessageIter __ri = __sig.reader();
        ::DBus::Path object; __ri >> object;
        std::vector< std::string > interfaces; __ri >> interfaces;
        InterfacesRemoved(object, interfaces);
    }

};
}}}
#endif  // __dbusxx__objectmanagerproxy_h__PROXY_MARSHALL_H
