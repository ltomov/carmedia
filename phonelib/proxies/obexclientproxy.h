/*
 *  This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */
#ifndef __dbusxx__obexclientproxy_h__PROXY_MARSHALL_H
#define __dbusxx__obexclientproxy_h__PROXY_MARSHALL_H
#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace bluez {
namespace obex {

class AgentManager1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    AgentManager1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.obex.AgentManager1")
    {
    }

    /* properties exported by this interface */
    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    void RegisterAgent(const ::DBus::Path& agent)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << agent;
        __call.member("RegisterAgent");
        invoke_method(__call);
    }

    void UnregisterAgent(const ::DBus::Path& agent)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << agent;
        __call.member("UnregisterAgent");
        invoke_method(__call);
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}}
namespace org {
namespace bluez {
namespace obex {

class Client1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    Client1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.obex.Client1")
    {
    }

    /* properties exported by this interface */
    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    ::DBus::Path CreateSession(const std::string& destination, const std::map< std::string, ::DBus::Variant >& args)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << destination;
        __wi << args;
        __call.member("CreateSession");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        ::DBus::Path __argout;
        __ri >> __argout;
        return __argout;
    }

    void RemoveSession(const ::DBus::Path& session)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << session;
        __call.member("RemoveSession");
        invoke_method(__call);
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}}
#endif  // __dbusxx__obexclientproxy_h__PROXY_MARSHALL_H
