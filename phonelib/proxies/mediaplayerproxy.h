/*
 *  This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */
#ifndef __dbusxx__proxy_h__PROXY_MARSHALL_H
#define __dbusxx__proxy_h__PROXY_MARSHALL_H
#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace bluez {

class MediaPlayer1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    MediaPlayer1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.MediaPlayer1")
    {
    }

    /* properties exported by this interface */
    const std::string Name() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Name";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Type() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Type";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Subtype() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Subtype";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    uint32_t Position() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Position";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Status() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Status";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Equalizer() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Equalizer";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    void Equalizer(const std::string &input) {
        ::DBus::CallMessage __call ;
         __call.member("Set");  __call.interface( "org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        ::DBus::Variant __value;
        ::DBus::MessageIter vi = __value.writer ();
        vi << input;
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Equalizer";
        __wi << interface_name;
        __wi << property_name;
        __wi << __value;
        ::DBus::Message __ret = this->invoke_method (__call);
    }

    const std::string Repeat() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Repeat";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    void Repeat(const std::string &input) {
        ::DBus::CallMessage __call ;
         __call.member("Set");  __call.interface( "org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        ::DBus::Variant __value;
        ::DBus::MessageIter vi = __value.writer ();
        vi << input;
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Repeat";
        __wi << interface_name;
        __wi << property_name;
        __wi << __value;
        ::DBus::Message __ret = this->invoke_method (__call);
    }

    const std::string Shuffle() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Shuffle";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    void Shuffle(const std::string &input) {
        ::DBus::CallMessage __call ;
         __call.member("Set");  __call.interface( "org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        ::DBus::Variant __value;
        ::DBus::MessageIter vi = __value.writer ();
        vi << input;
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Shuffle";
        __wi << interface_name;
        __wi << property_name;
        __wi << __value;
        ::DBus::Message __ret = this->invoke_method (__call);
    }

    const std::string Scan() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Scan";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    void Scan(const std::string &input) {
        ::DBus::CallMessage __call ;
         __call.member("Set");  __call.interface( "org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        ::DBus::Variant __value;
        ::DBus::MessageIter vi = __value.writer ();
        vi << input;
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Scan";
        __wi << interface_name;
        __wi << property_name;
        __wi << __value;
        ::DBus::Message __ret = this->invoke_method (__call);
    }

    const std::map< std::string, ::DBus::Variant > Track() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Track";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const ::DBus::Path Device() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Device";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    bool Browsable() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Browsable";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    bool Searchable() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Searchable";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const ::DBus::Path Playlist() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaPlayer1";
        const std::string property_name  = "Playlist";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    void Play()
    {
        ::DBus::CallMessage __call;
        __call.member("Play");
        invoke_method(__call);
    }

    void Pause()
    {
        ::DBus::CallMessage __call;
        __call.member("Pause");
        invoke_method(__call);
    }

    void Stop()
    {
        ::DBus::CallMessage __call;
        __call.member("Stop");
        invoke_method(__call);
    }

    void Next()
    {
        ::DBus::CallMessage __call;
        __call.member("Next");
        invoke_method(__call);
    }

    void Previous()
    {
        ::DBus::CallMessage __call;
        __call.member("Previous");
        invoke_method(__call);
    }

    void FastForward()
    {
        ::DBus::CallMessage __call;
        __call.member("FastForward");
        invoke_method(__call);
    }

    void Rewind()
    {
        ::DBus::CallMessage __call;
        __call.member("Rewind");
        invoke_method(__call);
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}

#endif  // __dbusxx__proxy_h__PROXY_MARSHALL_H
