/*
 *  This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */
#ifndef __dbusxx__transferproxy_h__PROXY_MARSHALL_H
#define __dbusxx__transferproxy_h__PROXY_MARSHALL_H
#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace bluez {
namespace obex {

class Transfer1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    Transfer1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.obex.Transfer1")
    {
    }

    /* properties exported by this interface */
    const std::string Status() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Transfer1";
        const std::string property_name  = "Status";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Name() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Transfer1";
        const std::string property_name  = "Name";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    uint64_t Size() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Transfer1";
        const std::string property_name  = "Size";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Filename() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Transfer1";
        const std::string property_name  = "Filename";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    uint64_t Transferred() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Transfer1";
        const std::string property_name  = "Transferred";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const ::DBus::Path Session() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Transfer1";
        const std::string property_name  = "Session";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    void Suspend()
    {
        ::DBus::CallMessage __call;
        __call.member("Suspend");
        invoke_method(__call);
    }

    void Resume()
    {
        ::DBus::CallMessage __call;
        __call.member("Resume");
        invoke_method(__call);
    }

    void Cancel()
    {
        ::DBus::CallMessage __call;
        __call.member("Cancel");
        invoke_method(__call);
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}}

#endif  // __dbusxx__transferproxy_h__PROXY_MARSHALL_H
