/*
 *  This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */
#ifndef __dbusxx__deviceproxy_h__PROXY_MARSHALL_H
#define __dbusxx__deviceproxy_h__PROXY_MARSHALL_H
#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace bluez {

class Device1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    Device1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.Device1")
    {
    }

    /* properties exported by this interface */
    const std::string Address() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Address";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Name() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Name";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Alias() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Alias";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    void Alias(const std::string &input) {
        ::DBus::CallMessage __call ;
         __call.member("Set");  __call.interface( "org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        ::DBus::Variant __value;
        ::DBus::MessageIter vi = __value.writer ();
        vi << input;
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Alias";
        __wi << interface_name;
        __wi << property_name;
        __wi << __value;
        ::DBus::Message __ret = this->invoke_method (__call);
    }

    uint32_t Class() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Class";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    uint16_t Appearance() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Appearance";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Icon() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Icon";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    bool Paired() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Paired";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    bool Trusted() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Trusted";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    void Trusted(const bool &input) {
        ::DBus::CallMessage __call ;
         __call.member("Set");  __call.interface( "org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        ::DBus::Variant __value;
        ::DBus::MessageIter vi = __value.writer ();
        vi << input;
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Trusted";
        __wi << interface_name;
        __wi << property_name;
        __wi << __value;
        ::DBus::Message __ret = this->invoke_method (__call);
    }

    bool Blocked() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Blocked";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    void Blocked(const bool &input) {
        ::DBus::CallMessage __call ;
         __call.member("Set");  __call.interface( "org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        ::DBus::Variant __value;
        ::DBus::MessageIter vi = __value.writer ();
        vi << input;
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Blocked";
        __wi << interface_name;
        __wi << property_name;
        __wi << __value;
        ::DBus::Message __ret = this->invoke_method (__call);
    }

    bool LegacyPairing() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "LegacyPairing";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    int16_t RSSI() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "RSSI";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    bool Connected() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Connected";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::vector< std::string > UUIDs() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "UUIDs";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Modalias() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Modalias";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const ::DBus::Path Adapter() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Device1";
        const std::string property_name  = "Adapter";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    void Disconnect()
    {
        ::DBus::CallMessage __call;
        __call.member("Disconnect");
        invoke_method(__call);
    }

    void Connect()
    {
        ::DBus::CallMessage __call;
        __call.member("Connect");
        invoke_method(__call);
    }

    void ConnectProfile(const std::string& UUID)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << UUID;
        __call.member("ConnectProfile");
        invoke_method(__call);
    }

    void DisconnectProfile(const std::string& UUID)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << UUID;
        __call.member("DisconnectProfile");
        invoke_method(__call);
    }

    void Pair()
    {
        ::DBus::CallMessage __call;
        __call.member("Pair");
        invoke_method(__call);
    }

    void CancelPairing()
    {
        ::DBus::CallMessage __call;
        __call.member("CancelPairing");
        invoke_method(__call);
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}

namespace org {
namespace bluez {

class Network1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    Network1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.Network1")
    {
    }

    /* properties exported by this interface */
    bool Connected() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Network1";
        const std::string property_name  = "Connected";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Interface() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Network1";
        const std::string property_name  = "Interface";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string UUID() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.Network1";
        const std::string property_name  = "UUID";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    std::string Connect(const std::string& uuid)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << uuid;
        __call.member("Connect");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        std::string __argout;
        __ri >> __argout;
        return __argout;
    }

    void Disconnect()
    {
        ::DBus::CallMessage __call;
        __call.member("Disconnect");
        invoke_method(__call);
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}
namespace org {
namespace bluez {

class MediaControl1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    MediaControl1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.MediaControl1")
    {
    }

    /* properties exported by this interface */
    bool Connected() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.MediaControl1";
        const std::string property_name  = "Connected";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    void Play()
    {
        ::DBus::CallMessage __call;
        __call.member("Play");
        invoke_method(__call);
    }

    void Pause()
    {
        ::DBus::CallMessage __call;
        __call.member("Pause");
        invoke_method(__call);
    }

    void Stop()
    {
        ::DBus::CallMessage __call;
        __call.member("Stop");
        invoke_method(__call);
    }

    void Next()
    {
        ::DBus::CallMessage __call;
        __call.member("Next");
        invoke_method(__call);
    }

    void Previous()
    {
        ::DBus::CallMessage __call;
        __call.member("Previous");
        invoke_method(__call);
    }

    void VolumeUp()
    {
        ::DBus::CallMessage __call;
        __call.member("VolumeUp");
        invoke_method(__call);
    }

    void VolumeDown()
    {
        ::DBus::CallMessage __call;
        __call.member("VolumeDown");
        invoke_method(__call);
    }

    void FastForward()
    {
        ::DBus::CallMessage __call;
        __call.member("FastForward");
        invoke_method(__call);
    }

    void Rewind()
    {
        ::DBus::CallMessage __call;
        __call.member("Rewind");
        invoke_method(__call);
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}
#endif  // __dbusxx__deviceproxy_h__PROXY_MARSHALL_H
