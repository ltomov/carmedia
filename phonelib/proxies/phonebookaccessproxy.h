/*
 *  This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */
#ifndef __dbusxx__pronebookaccessproxy_h__PROXY_MARSHALL_H
#define __dbusxx__pronebookaccessproxy_h__PROXY_MARSHALL_H
#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace bluez {
namespace obex {

class Session1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    Session1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.obex.Session1")
    {
    }

    /* properties exported by this interface */
    const std::string Source() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Session1";
        const std::string property_name  = "Source";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Destination() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Session1";
        const std::string property_name  = "Destination";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    uint8_t Channel() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Session1";
        const std::string property_name  = "Channel";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string Target() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.Session1";
        const std::string property_name  = "Target";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    std::string GetCapabilities()
    {
        ::DBus::CallMessage __call;
        __call.member("GetCapabilities");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        std::string __argout;
        __ri >> __argout;
        return __argout;
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}}

namespace org {
namespace bluez {
namespace obex {

class PhonebookAccess1_proxy
  : public ::DBus::InterfaceProxy
{
public:
    PhonebookAccess1_proxy()
    : ::DBus::InterfaceProxy("org.bluez.obex.PhonebookAccess1")
    {
    }

    /* properties exported by this interface */
    const std::string Folder() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.PhonebookAccess1";
        const std::string property_name  = "Folder";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string DatabaseIdentifier() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.PhonebookAccess1";
        const std::string property_name  = "DatabaseIdentifier";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string PrimaryCounter() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.PhonebookAccess1";
        const std::string property_name  = "PrimaryCounter";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    const std::string SecondaryCounter() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.PhonebookAccess1";
        const std::string property_name  = "SecondaryCounter";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    bool FixedImageSize() {
        ::DBus::CallMessage __call ;
         __call.member("Get"); __call.interface("org.freedesktop.DBus.Properties");
        ::DBus::MessageIter __wi = __call.writer();
        const std::string interface_name = "org.bluez.obex.PhonebookAccess1";
        const std::string property_name  = "FixedImageSize";
        __wi << interface_name;
        __wi << property_name;
        ::DBus::Message __ret = this->invoke_method (__call);
        ::DBus::MessageIter __ri = __ret.reader ();
        ::DBus::Variant argout;
        __ri >> argout;
        return argout;
    }

    /* methods exported by this interface.
     * these functions will invoke the corresponding methods
     * on the remote objects.
     */
    void Select(const std::string& location, const std::string& phonebook)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << location;
        __wi << phonebook;
        __call.member("Select");
        invoke_method(__call);
    }

    void PullAll(const std::string& targetfile, const std::map< std::string, ::DBus::Variant >& filters, ::DBus::Path& transfer, std::map< std::string, ::DBus::Variant >& properties)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << targetfile;
        __wi << filters;
        __call.member("PullAll");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        __ri >> transfer;
        __ri >> properties;
    }

    void Pull(const std::string& vcard, const std::string& targetfile, const std::map< std::string, ::DBus::Variant >& filters, ::DBus::Path& transfer, std::map< std::string, ::DBus::Variant >& properties)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << vcard;
        __wi << targetfile;
        __wi << filters;
        __call.member("Pull");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        __ri >> transfer;
        __ri >> properties;
    }

    std::vector< ::DBus::Struct< std::string, std::string > > List(const std::map< std::string, ::DBus::Variant >& filters)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << filters;
        __call.member("List");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        std::vector< ::DBus::Struct< std::string, std::string > > __argout;
        __ri >> __argout;
        return __argout;
    }

    std::vector< ::DBus::Struct< std::string, std::string > > Search(const std::string& field, const std::string& value, const std::map< std::string, ::DBus::Variant >& filters)
    {
        ::DBus::CallMessage __call;
        ::DBus::MessageIter __wi = __call.writer();
        __wi << field;
        __wi << value;
        __wi << filters;
        __call.member("Search");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        std::vector< ::DBus::Struct< std::string, std::string > > __argout;
        __ri >> __argout;
        return __argout;
    }

    uint16_t GetSize()
    {
        ::DBus::CallMessage __call;
        __call.member("GetSize");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        uint16_t __argout;
        __ri >> __argout;
        return __argout;
    }

    std::vector< std::string > ListFilterFields()
    {
        ::DBus::CallMessage __call;
        __call.member("ListFilterFields");
        ::DBus::Message __ret = invoke_method(__call);
        ::DBus::MessageIter __ri = __ret.reader();
        std::vector< std::string > __argout;
        __ri >> __argout;
        return __argout;
    }

    void UpdateVersion()
    {
        ::DBus::CallMessage __call;
        __call.member("UpdateVersion");
        invoke_method(__call);
    }

    /* signal handlers for this interface.
     * you will have to implement them in your ObjectProxy.
     */

protected:
private:
    /* unmarshallers (to unpack the DBus message before
     * calling the actual signal handler)
     */
};
}}}
#endif  // __dbusxx__pronebookaccessproxy_h__PROXY_MARSHALL_H
